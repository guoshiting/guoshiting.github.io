<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BIO,NIO&amp;AIO认识以及Netty初识</title>
    <url>/2022/09/20/BIO-NIO-AIO%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h1 id="BIO-NIO-amp-AIO认识及Netty初识"><a href="#BIO-NIO-amp-AIO认识及Netty初识" class="headerlink" title="BIO,NIO&amp;AIO认识及Netty初识"></a>BIO,NIO&amp;AIO认识及Netty初识</h1><span id="more"></span>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>1.BIO(Blocking IO)</strong></p>
<ul>
<li>同步阻塞模型，一个线程对应一个连接，连接时(accept)阻塞等待客户端连接，读取信息(read)时阻塞，等待客户端发送消息。</li>
</ul>
<p><strong>2.NIO(Non Blocking IO)</strong></p>
<ul>
<li>同步非阻塞模型，利用多路复用机制，实现一个线程处理多个连接；客户端的连接请求会注册到多路复用器(selector)上，多路复用器<strong>同步等待</strong>轮询或回调到有请求时就用进行处理。</li>
<li><strong>应用</strong>：常用于并发高，连接短，操作轻的情况，例如：聊天室</li>
</ul>
<p><strong>3.AIO(NIO 2.0)</strong></p>
<ul>
<li>异步非阻塞模型，由操作系统(底层OS)回调通知服务器<strong>异步</strong>处理IO事件</li>
<li><strong>应用</strong>：连接时间长，操作重的场景。</li>
</ul>
<h3 id="NIO详解"><a href="#NIO详解" class="headerlink" title="NIO详解"></a>NIO详解</h3><p><strong>1.NIO的三大组件channel，buffer和selecter</strong></p>
<ul>
<li>channel为客户端和服务器的连接通道</li>
<li>buffer数据结构为数组，buffer读取或写入channel的内容</li>
<li>selecter多路复用器，channel注册到selecter，selecter分配空闲线程处理channel的IO事件</li>
</ul>
<p><strong>2.NioSelectorServe初识</strong></p>
<ul>
<li>Selector.open() &#x2F;&#x2F;创建多路复用器，生成一个Selector对象</li>
<li>socketChannel.register(Selector，type) &#x2F;&#x2F;将channel注册到多路复用器上，并规定时间类型</li>
<li>selector.select() &#x2F;&#x2F;阻塞等待注册的channel发生IO事件</li>
<li>selector.selectedKeys() &#x2F;&#x2F;返回所有有IO事件的集合(SelectionKey),通过集合中的元素可以找到channel</li>
</ul>
<p><strong>3.epoll初识</strong></p>
<ul>
<li>JDK1.4以前用select(连接数为1024)或poll(连接数无上限)来实现NIO，JDK1.5开始使用epoll实现NIO。</li>
<li>select()或poll()通过不断轮询事件，来确定是否发生了IO事件。</li>
<li>epoll：OS感应到网络IO事件时，通过回调方法把事件放到一个文件中(可以理解为集合)，调用 selectedKeys时获取封装的事件。</li>
</ul>
<p><strong>3.为什么NIO使用较广</strong></p>
<ul>
<li>linux中，AIO的底层实现仍使用Epoll，性能上没有太大的优势</li>
<li>linux中，AIO的实现还不够成熟</li>
<li>Netty框架使用较多，Netty在NIO上做了很多异步的封装</li>
</ul>
<h3 id="Netty初识"><a href="#Netty初识" class="headerlink" title="Netty初识"></a>Netty初识</h3><p><strong>1.Netty概述</strong></p>
<ul>
<li>netty是一种异步的，事件驱动的网络通信框架。性能比较好，应用较广，Dubbo 协议默认使用 Netty 作为基础通信组件以及游戏行业使用较广。</li>
</ul>
<p><strong>2.线程模型</strong></p>
<ul>
<li><img src="/pictures/netty-01.png" alt="alt netty线程模型"></li>
</ul>
<p><strong>3.其他概念</strong></p>
<ul>
<li>Future和ChannelFuture可以注册监听，来确认操作的状态；ChannelHandler时处理IO事件的类</li>
<li>ByteBuf:Netty常用的的缓存类，进行读写，ByteBuf 由一串字节数组构成，并提供了两个索引，一个用于读取数据，一个用于写入数据；读取时，它的 readerIndex（读索引）将会根据读取的字节数递增，写入时它的 writerIndex 也会根据写入的字节数进行递增。<strong>byteBuf可以自动扩容</strong></li>
</ul>
<p><strong>4.粘包和拆包</strong></p>
<ul>
<li><p>TCP是一个流协议，数据传输没有界限的，所以在数据传输中可能会被TCP拆分成多个包进行发送，也有可能把多个小的包封装成 一个大的数据包发送，这就是所谓的TCP粘包和拆包问题。</p>
</li>
<li><p>解决方案</p>
<blockquote>
<p>1.消息定长度，传输的数据大小固定长度，例如每段的长度固定为100字节，如果不够空位补空格</p>
<p>2.在数据包尾部添加特殊分隔符，比如下划线。</p>
<p>3.发送长度：发送每条数据的时候，将数据的长度一并发送，如：长度+消息 一起发送</p>
</blockquote>
</li>
</ul>
<p><strong>5.Netty心跳检测机制</strong></p>
<ul>
<li>IdleStateHandler可以设置超时时间</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读超时  写超时  all超时</span></span><br><span class="line">pipeline.addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>, TimeUnit.SECONDS));</span><br><span class="line"><span class="comment">// 超时之后会触发 userEventTriggered 方法</span></span><br><span class="line">READER_IDLE 读超时</span><br><span class="line">WRITER_IDLE 写超时</span><br><span class="line">ALL_IDLE    all超时</span><br></pre></td></tr></table></figure>

<p><strong>6.Netty零拷贝</strong></p>
<ul>
<li><p>Netty的接收和发送ByteBuffer采用DIRECT BUFFERS，使用堆外直接内存进行Socket读写，不需要进行字节缓冲区的二次拷贝。</p>
<blockquote>
<p>使用直接内存的优缺点：</p>
<p>优点：1.不占用堆内存空间，减少了发生GC的可能  2.本地IO会直接操作直接内存（直接内存&#x3D;&gt;系统调用&#x3D;&gt;硬盘&#x2F;网卡）,而非直接内存则需要二次拷贝（堆内 存&#x3D;&gt;直接内存&#x3D;&gt;系统调用&#x3D;&gt;硬盘&#x2F;网卡）</p>
<p>缺点：1.初始分配较慢 2.没有JVM直接帮助管理内存，容易发生内存溢出。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>Dubbo中SPI机制</title>
    <url>/2022/10/09/Dubbo%E4%B8%ADSPI%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Dubbo中SPI机制"><a href="#Dubbo中SPI机制" class="headerlink" title="Dubbo中SPI机制"></a>Dubbo中SPI机制</h1><span id="more"></span>

<h3 id="JAVA的SPI"><a href="#JAVA的SPI" class="headerlink" title="JAVA的SPI"></a>JAVA的SPI</h3><ul>
<li>SPI机制：是一种将服务接口与服务实现分离以达到解耦、提升了程序可扩展性的机制；通过本地的注册发现获取到具体的实现类，轻松可插拔</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.classpath下新建META-INF/services目录中新建接口全路径命名的文件,文件内写入SPI接口的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    ServiceLoader&lt;SpiInterface&gt; load = ServiceLoader.load(SpiInterface.class);</span><br><span class="line">    Iterator&lt;SpiInterface&gt; iterator = load.iterator();   </span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">       <span class="type">SpiInterface</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">       next.test(<span class="string">&quot;SPI demo&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>SPI使用例子：jdbc的jar包</li>
</ul>
<h3 id="Dubbo中SPI"><a href="#Dubbo中SPI" class="headerlink" title="Dubbo中SPI"></a>Dubbo中SPI</h3><ul>
<li>例子:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExtensionLoader&lt;Protocol&gt; extensionLoader = ExtensionLoader.getExtensionLoader(Protocol.class);</span><br><span class="line"><span class="type">Protocol</span> <span class="variable">http</span> <span class="operator">=</span> extensionLoader.getExtension(<span class="string">&quot;dubbo&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>dubbo加载目录：META-INF&#x2F;dubbo&#x2F;internal&#x2F;；META-INF&#x2F;dubbo&#x2F;；META-INF&#x2F;services&#x2F;，dubbo的SPI方法中的文件内容为key&#x3D;class</li>
<li>如果文件中的类有有参构造方法且构造方法的参数有且只有接口类型的参数，就会加载为包装类，SPI获取类时如果有包装类则会获取包装类，获取的实体类则注入包装类</li>
<li>@Adaptive的含义：SPI加载类时，如果类中需要注入setXXX时，需要从Spring和SPI的容器中获取对应的bean，如果spring中没有，SPI容器中找到有@Adaptive标注的类，如果没有的话， 则需要在响应的方法中加上@Adaptive生成代理方法，代理方法参数中必须有URL参数或者有getUrl方法，URL.put(“类名”，key)</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch</title>
    <url>/2022/10/15/ElasticSearch/</url>
    <content><![CDATA[<h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><h3 id="1-Lucene和Elasticsearch有什么区别"><a href="#1-Lucene和Elasticsearch有什么区别" class="headerlink" title="1.Lucene和Elasticsearch有什么区别"></a>1.Lucene和Elasticsearch有什么区别</h3><ul>
<li>Lucene是一个 Java库，Elasticsearch是一个 JSON 基于， 分布式 中间件</li>
<li>Elasticsearch 基于 Lucene构建，并提供基于 JSON的REST API 来引用Lucene功能。</li>
<li>Elasticsearch 在Lucene之上 提供了一个 分布式系统</li>
<li>Elasticsearch提供了其他支持功能，例如线程池，队列，节点&#x2F;集群监视API，数据监视API，集群管理等。</li>
</ul>
<h3 id="2-Solr和ES"><a href="#2-Solr和ES" class="headerlink" title="2.Solr和ES"></a>2.Solr和ES</h3><ul>
<li>当单纯的对已有数据(不进行实时新增，修改和删除数据)进行搜索时，Solr更快。</li>
<li>实时建立索引时, Solr会产生io阻塞，查询性能较差, Elasticsearch具有明显的 优势。、</li>
<li>Solr 利用 Zookeeper 进行分布式管理，而Elasticsearch 自身带有分布式协调 管理功能</li>
<li>Solr 支持更多格式的数据，比如JSON、XML、CSV，而 Elasticsearch 仅支持 json文件格式</li>
</ul>
<h3 id="3-关系型数据库和ES"><a href="#3-关系型数据库和ES" class="headerlink" title="3.关系型数据库和ES"></a>3.关系型数据库和ES</h3><table>
<thead>
<tr>
<th>关系型数据库</th>
<th>database</th>
<th>Table</th>
<th>Row</th>
<th>Column</th>
</tr>
</thead>
<tbody><tr>
<td>ES</td>
<td>index（索引）</td>
<td>Type(7.x后统一为_doc)</td>
<td>ducument</td>
<td>Field</td>
</tr>
</tbody></table>
<h3 id="4-倒排索引VS正排索引"><a href="#4-倒排索引VS正排索引" class="headerlink" title="4.倒排索引VS正排索引"></a>4.倒排索引VS正排索引</h3><ul>
<li>正排索引：以文档的ID为关键字，表中记录文档中每个字的位置信息，查找时扫描表中每个文档中字的信息直到找出所有包含查询关键字的文档。</li>
<li>倒排索引：以字或词为关键字进行索引，表中关键字所对应的记录表项记录了出现这个字或词的所有文档，一个表项就是一个字表段，它记录该文档的ID和字符在该文档中出现的位置情况。</li>
</ul>
<h3 id="5-ES中概念"><a href="#5-ES中概念" class="headerlink" title="5.ES中概念"></a>5.ES中概念</h3><ul>
<li><p>索引 index：相似文档的集合</p>
</li>
<li><p>映射 mapping：文档的存储方式和限制，如某个字段的数据类型、默认 值、分词器、是否被索引等等</p>
</li>
<li><p>字段Field：文档中的字段属性</p>
</li>
<li><p>字段类型 ：字段Field的类型，常见：Text、Keyword、Byte等</p>
</li>
<li><p>文档 document：类似一条记录。文档以JSON（Javascript Object  Notation）格式来表示</p>
</li>
<li><p>集群 cluster：一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提 供索引和搜索功能</p>
</li>
<li><p>节点 node：一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能</p>
</li>
<li><p>分片shards：由于存储数据较大，一个节点不能存储的话需要分片进行存储，水平分割&#x2F;扩展你的内容容量。</p>
</li>
<li><p>副本replicas：主分片的数据备份，副本从来不和主分片在同一节点。</p>
</li>
<li><p>文档中数据的类型</p>
<blockquote>
<p>字符串： text 和 keyword。</p>
<p>数值型：long、integer、short、byte、double、float</p>
<p>日期型：date</p>
<p>布尔型：boolean</p>
</blockquote>
</li>
<li><p>Master节点：管理索引（创建索引、删除索引）、分配分片，维护元数据，管理集群节点状态，不负责数据写入和查询，比较轻量级，可以和DataNode分离，也可以不分离，多个master节点选举产生</p>
</li>
<li><p>DataNode节点：数据写入、数据检索，</p>
</li>
<li><p>客户端节点：当主节点和数据节点配置都设置data.master &#x3D; false和data.data&#x3D;false的时候，<strong>该节点只能处理路由请求，处理搜索，分发索引操作</strong>等</p>
</li>
</ul>
<h3 id="6-基本操作"><a href="#6-基本操作" class="headerlink" title="6.基本操作"></a>6.基本操作</h3><ul>
<li><p>索引操作</p>
<blockquote>
<ul>
<li>创建索引：PUT &#x2F;索引名称</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&gt;PUT /user</span><br><span class="line">&gt;<span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;book&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="comment">//7之前需要有type，7以及之后不需要</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">    	<span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">&gt;<span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>查询索引：GET &#x2F;索引名称</li>
<li>删除索引：DELETE &#x2F;索引名称</li>
</ul>
</blockquote>
</li>
<li><p>数据文档操作</p>
<blockquote>
<ul>
<li>添加文档  PUT &#x2F;索引名称&#x2F;类型&#x2F;id</li>
<li>修改文档  PUT &#x2F;es_db&#x2F;_doc&#x2F;1  或  POST &#x2F;es_db&#x2F;_doc&#x2F;1</li>
<li>查询文档  GET &#x2F;索引名称&#x2F;类型&#x2F;id</li>
<li>删除文档  DELETE &#x2F;索引名称&#x2F;类型&#x2F;id</li>
<li>部分字段修改：POST 索引名称&#x2F;类型&#x2F;id&#x2F;_update</li>
</ul>
</blockquote>
</li>
<li><p>POST和PUT的区别</p>
<blockquote>
<ul>
<li>POST和PUT都可以新增数据，POST新增数据可以不指定id，系统会自动生成id，PUT必须指定id</li>
<li>POST和PUT的更新都需要指定id，es中的更新操作为先删除后修改。</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="7-DSL语言"><a href="#7-DSL语言" class="headerlink" title="7.DSL语言"></a>7.DSL语言</h3><ul>
<li><p>无条件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查询用词说明</p>
<blockquote>
<ul>
<li><p>match : 通过match关键词模糊匹配条件内容</p>
</li>
<li><p>prefix : 前缀匹配</p>
</li>
<li><p>regexp : 通过正则表达式来匹配数据</p>
</li>
<li><p>match条件还支持以下参数：</p>
<ul>
<li>query : 指定匹配的值</li>
<li>operator : 匹配条件类型，and或or</li>
</ul>
</li>
<li><p>minmum_should_match : 指定最小匹配的数量</p>
</li>
<li><p>term : 单个条件相等</p>
</li>
<li><p>terms : 单个字段属于某个值数组内的值</p>
</li>
<li><p>range : 字段属于某个范围内的值</p>
</li>
<li><p>exists : 某个字段的值是否存在</p>
</li>
<li><p>ids : 通过ID批量查询</p>
</li>
<li><p>bool : 各条件之间有and,or或not的关系</p>
<ul>
<li>must : 各个条件都必须满足，即各条件是and的 关系</li>
<li>should : 各个条件有一个满足即可，即各条件 是or的关系</li>
<li>must_not : 不满足所有条件，即各条件是not的 关系</li>
<li>filter : 不计算相关度评分，它不计算_score 即相关度评分，效率更高</li>
</ul>
</li>
<li><p>constant_score : 不计算相关度评分</p>
</li>
<li><p>父子文档查询：parent&#x2F;child</p>
</li>
<li><p>嵌套文档查询: nested</p>
</li>
</ul>
</blockquote>
</li>
<li><p>查询说明</p>
<blockquote>
<ul>
<li>term不会分词。keyword字段也不分词</li>
<li>text字段会分词，而term不分词，所以term查询的条件必须是text字段分词后的<strong>某一个</strong>。text:中国北京，term:中国北京 时，如果text分词之后中国北京没有分为一个词，此时就查询不到</li>
<li>match会被分词，text类型会分词</li>
<li>match_phase会对输入做分词，但是需要结果中也包含所有的分词，而且顺序要 求一样。</li>
<li>query_string和match类似，但是match需要指定字段名，query_string可以不指定字段，不指定时是在所有字段中搜索，范围更广泛。</li>
</ul>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> # term查询时不分词，match查询时分词</span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;111&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> </span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">               <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="string">&quot;wo men&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;operator&quot;</span><span class="punctuation">:</span><span class="string">&quot;and&quot;</span> # 分词之后的词都包含  or：分词之后的词最少包含一个</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># <span class="string">&quot;address&quot;</span><span class="punctuation">,</span><span class="string">&quot;name&quot;</span>中分词查询张三</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> </span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;address&quot;</span><span class="punctuation">,</span><span class="string">&quot;name&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># 范围查询</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> </span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span><span class="number">25</span> ## gte<span class="punctuation">:</span>大于等于 lte<span class="punctuation">:</span>小于等于 gt<span class="punctuation">:</span>大于 lt<span class="punctuation">:</span>小于</span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> #分页</span><br><span class="line">	<span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span> #分页</span><br><span class="line">	<span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;name&quot;</span><span class="punctuation">,</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span> <span class="string">&quot;book&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> #返回字段</span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="string">&quot;desc&quot;</span><span class="punctuation">&#125;</span> # 排序</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Filter过滤器方式查询，它的查询不会计算相关性分值，也不会对结果进 行排序, 因此效率会高一点，查询的结果可以被缓存。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> </span><br><span class="line">            <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span> # term查询时不分词，match查询时分词</span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;111&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="8-ES的写入和查询已经实时查询"><a href="#8-ES的写入和查询已经实时查询" class="headerlink" title="8.ES的写入和查询已经实时查询"></a>8.ES的写入和查询已经实时查询</h3><ul>
<li><p><strong>写入流程</strong></p>
<blockquote>
<p>1.客户端选择任意一个DataNode发送请求，例如：node2。此时，node2就成为一个Coordinating node（协调节点）</p>
<p>2.计算得到文档要写入的分片,进行路由，将请求转发给对应的primary shard所在的(比如：node1)</p>
<p>3.node1节点上的Primary Shard处理请求，写入数据到索引库中，并将数据同步到 Replica shard </p>
<p>4.Primary Shard和Replica Shard都保存好了文档，返回请求到客户端client</p>
</blockquote>
</li>
<li><p><strong>查询流程</strong></p>
<blockquote>
<p>1.client发起查询请求，某个DataNode接收到请求，该DataNode就会成为协调节点 （Coordinating Node） </p>
<p>2.协调节点（Coordinating Node）将查询请求广播到每一个数据节点，这些数据节点的分片会处理该查询请求 </p>
<p>3.每个分片进行数据查询，将符合条件的数据放在一个优先队列中，并将这些数据的文档ID、节点信息、分片信息返回给协调节点 </p>
<p>4.协调节点将所有的结果进行汇总，并进行全局排序</p>
<p>5.协调节点向包含这些文档ID的分片发送get请求，对应的分片将文档数据返回给协调节点，最后协调节点将数据返回给客户端</p>
</blockquote>
</li>
<li><p><strong>Elasticsearch准实时索引实现</strong></p>
<blockquote>
<p>1.当数据写入到ES分片时，会首先写入到内存中，然后通过内存的buffer生成一个Segment，并刷到文件系统缓存中，数据可以被检索（注意不是直接刷到磁盘)ES中默认1秒，refresh一次 </p>
<p>2.在写入到内存中的同时，也会记录translog日志，在refresh期间出现异常，会根据translog来进行数据恢复等到文件系统缓存中的segment数据都刷到磁盘中，清空translog文件 ,translog文件只记录为刷新到磁盘的数据操作</p>
<p>3.ES默认每隔30分钟会将文件系统缓存的数据刷入到磁盘</p>
<p>4.Segment太多时，ES定期会将多个segment合并成为大的segment，减少索引查询时IO开销，此阶段ES会真正的物理删除（之前执行过的delete的数据）</p>
</blockquote>
</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><p>对已存在的mapping映射进行修改</p>
<blockquote>
<p>新建索引–&gt;导入原有数据–&gt;为索引新建别名–&gt;删除旧索引</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">## 导入操作</span><br><span class="line">POST _reindex</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;旧索引&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;新索引&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>多个索引查询</p>
<blockquote>
<p>如果数据量较大，一个索引不方便存放的话，可以把两个索引或多个索引建一个相同的别名，用别名查询时就是查询多个索引。例如：user_2011和user_2022就可以建一个别名user</p>
</blockquote>
</li>
<li><p>Elasticsearch乐观并发控制</p>
<blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"># <span class="number">7</span>以前，使用version控制</span><br><span class="line">PUT /db_index/_doc/<span class="number">1</span>?version=<span class="number">1</span></span><br><span class="line"># <span class="number">7</span>和<span class="number">7</span>以后，if_seq_no=版本值&amp;if_primary_term=分片计数，每当Primary Shard发生重新分配，_primary_term就会加<span class="number">1</span>，version属于当前这条数据，而seq_no属于整个index</span><br><span class="line">POST /db_index/_update/<span class="number">1</span>/?if_seq_no=<span class="number">5</span>&amp;if_primary_term=<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA程序打war包-idea</title>
    <url>/2022/09/19/JAVA%E7%A8%8B%E5%BA%8F%E6%89%93war%E5%8C%85-idea/</url>
    <content><![CDATA[<h1 id="JAVA程序打war包-idea"><a href="#JAVA程序打war包-idea" class="headerlink" title="JAVA程序打war包(idea)"></a>JAVA程序打war包(idea)</h1><span id="more"></span>

<ul>
<li><h2 id="war包设置"><a href="#war包设置" class="headerlink" title="war包设置"></a>war包设置</h2><blockquote>
<p>1.File -&gt; Project Structure</p>
</blockquote>
</li>
</ul>
<p><img src="/pictures/2-1.png" alt="alt 2-1"></p>
<p><img src="/pictures/2-2.png" alt="alt 2-2"></p>
<ul>
<li><h2 id="war包编译设置"><a href="#war包编译设置" class="headerlink" title="war包编译设置"></a>war包编译设置</h2></li>
</ul>
<blockquote>
<p>1.设置工程打包路径</p>
</blockquote>
<p><img src="/pictures/2-3.png" alt="alt 2-3"></p>
<blockquote>
<p>2.加入class和lib</p>
</blockquote>
<p><img src="/pictures/2-4.png" alt="alt 2-4"></p>
<p><img src="/pictures/2-5.png" alt="alt 2-5"></p>
<ul>
<li><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2></li>
</ul>
<blockquote>
<p>Build -&gt; Build Artifacts -&gt; Build</p>
</blockquote>
<p><img src="/pictures/2-6.png" alt="alt 2-6"></p>
<p><img src="/pictures/2-7.png" alt="alt 2-7"></p>
<ul>
<li><h2 id="注意设置java编译路径"><a href="#注意设置java编译路径" class="headerlink" title="注意设置java编译路径"></a>注意设置java编译路径</h2></li>
</ul>
<blockquote>
<p>1.File -&gt; Project Structure -&gt; Project</p>
</blockquote>
<p><img src="/pictures/2-8.jpg" alt="alt 2-8"></p>
]]></content>
      <categories>
        <category>idea使用</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC和Dubbo初识</title>
    <url>/2022/10/07/RPC%E5%92%8CDubbo%E5%88%9D%E8%AF%86/</url>
    <content><![CDATA[<h1 id="RPC和Dubbo初识"><a href="#RPC和Dubbo初识" class="headerlink" title="RPC和Dubbo初识"></a>RPC和Dubbo初识</h1><span id="more"></span>

<h3 id="RPC初识"><a href="#RPC初识" class="headerlink" title="RPC初识"></a>RPC初识</h3><p><strong>1.概念</strong></p>
<ul>
<li>RPC:远程过程调用，是一个计算机通讯协议。该协议允许一台计算机程序调用另一个地址空间的子程序，即可以像调用本地方法一样调用远程方法。</li>
</ul>
<p><strong>2.传输协议</strong></p>
<ul>
<li>RPC over Http：基于Http协议来传输数据</li>
<li>PRC over Tcp：基于Tcp协议来传输数据</li>
</ul>
<h3 id="Dubbo初识"><a href="#Dubbo初识" class="headerlink" title="Dubbo初识"></a>Dubbo初识</h3><p><strong>1.概念图</strong></p>
<p><img src="/pictures/dubbo-01.png" alt="alt dubbo信息"></p>
<p><strong>2.概念</strong></p>
<p>Apache Dubbo 是⼀款⾼性能、轻量级的开源 Java 服务框架，涉猎服务治理、服务监控、服务⽹关等等。</p>
<p><strong>3.本地缓存注册信息</strong></p>
<ul>
<li>如果程序运行中注册中心宕机了，服务依旧会调用成功，因为dubbo客户端连接注册中心时会本地缓存一份注册信息，程序调用时会读取缓存中的注册信息</li>
<li>注册中心中客户端订阅的注册信息发送变化时，注册中心会通知客户端就行更新</li>
</ul>
<h3 id="Dubbo功能"><a href="#Dubbo功能" class="headerlink" title="Dubbo功能"></a>Dubbo功能</h3><p><strong>1.负载均衡</strong>(默认：random)</p>
<ul>
<li>服务端和客户端都能配置负载均衡策略，如果客户端和服务端都配置了则以客户端配置为准</li>
<li>负载均衡逻辑在客户端的代码中实现，最少活跃调用数是在客户端统计，调用开始时active+1，调用结束后active-1，active为活跃数</li>
<li>负载均衡策略：<strong>随机</strong>（可以按权重配置），<strong>轮询</strong>（可以按权重配置），<strong>最少活跃调用数</strong>，<strong>一致性 Hash</strong></li>
</ul>
<p><strong>2.服务超时</strong></p>
<ul>
<li>服务端和客户端可以配置服务超时时间，如果只有一端配置了超时时间则时程序超时时间</li>
<li>客户端超时之后会<strong>抛</strong>超时异常，但是服务端超时之后<strong>只</strong>打印⼀个超时⽇志</li>
<li>异步调用也是有超时的，但是<strong>容错和mock</strong>（像同步那样设置时）不生效。</li>
</ul>
<p><strong>3.集群容错</strong>(默认：失败自动重试，<code>retries=&quot;2&quot;</code> 来设置重试次数(不含第一次))</p>
<ul>
<li><p>客户端调用失败(一般指RpcException(如:超时),程序运行中业务throw Exception不会重试)之后，执行配置的容错策略，比如：重新调用其他的服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端会把业务抛出的异常(超时会包装为RpcException)放到appResponse的Throwable exception属性中，并把异常包装为RuntimeException,异步调用没有容错机制</span></span><br><span class="line"><span class="comment">//mock机制判断异常时，代码：result.getException() instanceof RpcException</span></span><br><span class="line">result = <span class="built_in">this</span>.invoker.invoke(invocation);</span><br><span class="line"><span class="keyword">if</span>(result.getException() != <span class="literal">null</span> &amp;&amp; result.getException() <span class="keyword">instanceof</span> RpcException)&#123; mock返回&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FailoverClusterInvoker</span>&lt;T&gt; <span class="keyword">extends</span> <span class="title class_">AbstractClusterInvoker</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doInvoke</span><span class="params">(Invocation invocation, <span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> 				RpcException &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> invoker.invoke(invocation);</span><br><span class="line">			<span class="comment">//框架抛出的异常，服务端业务抛出的异常会进行封装</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.isBiz()) &#123; <span class="comment">// 业务异常</span></span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">                le = e;<span class="comment">//继续for循环</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                le = <span class="keyword">new</span> <span class="title class_">RpcException</span>(e.getMessage(), e);<span class="comment">//继续for循环</span></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                providers.add(invoker.getUrl().getAddress());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/pictures/dubbo-02.png" alt="alt dubbo-Exception"></p>
</li>
<li><p>集群容错模式：</p>
<blockquote>
<ul>
<li>Failfast Cluster(快速失败，只发起一次调用，失败立即报错)</li>
<li>Failsafe Cluster(失败安全，出现异常时，直接忽略)</li>
<li>Failback Cluster(失败自动恢复，后台记录失败请求，定时重发)</li>
<li>Forking Cluster(并行调用多个服务器，只要一个成功即返回)</li>
<li>Broadcast Cluster(广播调用所有提供者，逐个调用，任意一台报错则报错)</li>
</ul>
</blockquote>
</li>
</ul>
<p><strong>4.服务降级</strong></p>
<ul>
<li><p>服务提供者报错了，所采取的措施，如报错后返回fail等信息</p>
</li>
<li><p>集群容错和服务降级的区别</p>
<blockquote>
<p>集群容错是整个集群范围内的容错</p>
<p>服务降级是单个服务提供者的⾃身容错</p>
</blockquote>
</li>
</ul>
<p><strong>5.本地存根</strong></p>
<ul>
<li>本地存根就是⼀段逻辑，这段逻辑是在服务消费端执⾏的,</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端需要提供存根（Stub）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BarServiceStub</span> <span class="keyword">implements</span> <span class="title class_">BarService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BarService barService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造函数传入真正的远程代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BarServiceStub</span><span class="params">(BarService barService)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.barService = barService;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="comment">// 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> barService.sayHello(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 你可以容错，可以做任何AOP拦截事项</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;容错数据&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>6.本地伪装</strong></p>
<ul>
<li>本地伪装就是Mock</li>
</ul>
<p><strong>7.参数回调</strong></p>
<ul>
<li>客户端调用服务端后，服务端的逻辑需要调用客户端。例：<a href="http://dubbo.apache.org/zh/docs/v2.7/user/examples/callback-parameter/">http://dubbo.apache.org/zh/docs/v2.7/user/examples/callback-parameter/</a></li>
</ul>
<p><strong>8.异步调用</strong></p>
<p><strong>9.泛化调用和泛化调用服务</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Reference(id = &quot;xxxxService&quot;, version = &quot;default&quot;, interfaceName = &quot;com.xxx.XxxService&quot;, generic = true)</span></span><br><span class="line"><span class="keyword">private</span> GenericService genericService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(interfaceName = &quot;com.tuling.XxxService&quot;, version = &quot;generic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericDemoService</span> <span class="keyword">implements</span> <span class="title class_">GenericService</span></span><br></pre></td></tr></table></figure>

<p><strong>10.Dubbo中的REST</strong></p>
<h3 id="控制台"><a href="#控制台" class="headerlink" title="控制台"></a>控制台</h3><ul>
<li>控制台可以动态配置或修改服务参数，配置路由规则，和tag配置(客户端中发送的tag来转发到特定的服务端，即实现蓝绿发布，灰度发布)</li>
</ul>
<h3 id="dubbo常识"><a href="#dubbo常识" class="headerlink" title="dubbo常识"></a>dubbo常识</h3><ul>
<li><p>dubbo自带的配置中心的配置大于代码中的配置(<strong>默认是大于的，可以配置为配置中心优先级小于代码中的配置</strong>)，代码中的配置（类中的配置&gt;application中的配置）</p>
</li>
<li><p><strong>port+path&#x2F;name+version+group</strong>作为服务的key进行查找服务并执行服务的</p>
</li>
<li><p><strong>@Activate</strong>注解</p>
<blockquote>
<p>这个注解的属性有：</p>
<ul>
<li>String[] group()：表示这个扩展点是属于哪组的，这⾥组通常分为PROVIDER和CONSUMER，表示 该扩展点能在服务提供者端，或者消费端使⽤</li>
<li>String[] value()：表示的是URL中的某个参数key，当利⽤getActivateExtension⽅法来寻找扩展点 时，如果传⼊的url中包含的参数的所有key中，包括了当前扩展点中的value值，那么则表示当前url可 以使⽤该扩展点。</li>
</ul>
<p>使用</p>
<ul>
<li>类中或方法中使用@Activate</li>
<li>SPI文件中增加@Activate的类的全路径类名</li>
</ul>
</blockquote>
</li>
<li><p>dubbo调用时直接负载均衡获取Invoker类，然后进行调用，不会在查询注册信息，如果注册中心的注册信息发生改变时，Invoker就会改变。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Dubbo</tag>
      </tags>
  </entry>
  <entry>
    <title>自动注入@Autowired和@Resource</title>
    <url>/2022/09/19/%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5-Autowired%E5%92%8C-Resource/</url>
    <content><![CDATA[<h1 id="自动注入-Autowired和-Resource"><a href="#自动注入-Autowired和-Resource" class="headerlink" title="自动注入@Autowired和@Resource"></a>自动注入@Autowired和@Resource</h1><span id="more"></span>

<h4 id="1-来源不同"><a href="#1-来源不同" class="headerlink" title="1.来源不同"></a>1.来源不同</h4><blockquote>
<ul>
<li>@Autowired来自Spring，全路径类名为：org.springframework.beans.factory.annotation.Autowired</li>
<li>@Resource 来自JDK，全路径类名为：javax.annotation.Resource</li>
</ul>
</blockquote>
<h4 id="2-注入方式不同"><a href="#2-注入方式不同" class="headerlink" title="2.注入方式不同"></a>2.注入方式不同</h4><blockquote>
<p><del>大家的常识似乎为@Autowired是根据类型注入的，如果两个类实现同一个接口就不能用@Autowired</del>，<strong>但这个常识是错误的</strong></p>
<p>@Autowired的注入方式为：</p>
<ul>
<li>如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据</li>
<li>如果查询的结果不止一个，先根据 @Primary 来决策，其次是 @Priority 决策优先级</li>
<li>最后是根据 Bean 名字的严格匹配来决策</li>
</ul>
<p><img src="/pictures/autowire.png" alt="alt 修改config"></p>
<p>@Resource的注入方式为：</p>
<ul>
<li>如果没有指定name和type属性的话，默认首先使用属性名称作为bean name进行注入，如果查询不到，则使用属性的类型进行查找注入</li>
<li>如果指定了name和type其中一个，就按照指定的来进行注入，找不到或者找到多个，都会抛出异常</li>
<li>如果同时指定了name和type，则从Spring上下文中找到唯一匹配（类型和名称同时匹配）的bean进行装配，找不到则抛出异常</li>
</ul>
</blockquote>
<h4 id="其他方面"><a href="#其他方面" class="headerlink" title="其他方面"></a>其他方面</h4><blockquote>
<ul>
<li><p>如果@Autowired想指定名称注入的话，一般用@Autowired+@Qualifie(“beanName”)的方式</p>
</li>
<li><p>@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。</p>
</li>
<li><p>@Autowired默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false（@Autowired(required&#x3D;false)</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>spring初识</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-next新增文章</title>
    <url>/2022/09/19/hexo-next%E6%96%B0%E5%A2%9E%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="hexo-next新增文章"><a href="#hexo-next新增文章" class="headerlink" title="hexo-next新增文章"></a>hexo-next新增文章</h1><span id="more"></span>

<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><blockquote>
<p>1.安装node.js和git</p>
<p>2.安装hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装hexo</span><br><span class="line">npm install -g hexo</span><br><span class="line">#新建自己的项目文件夹(myproject)并进入自己的项目文件夹</span><br><span class="line">cd myproject</span><br><span class="line">hexo init</span><br><span class="line">#安装依赖</span><br><span class="line">npm install</span><br><span class="line">#hexo编译和启动</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">#访问http://localhost:4000,查看hexo是否搭建成功</span><br></pre></td></tr></table></figure>

<p>3.安装git插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="安装hexo-next"><a href="#安装hexo-next" class="headerlink" title="安装hexo-next"></a>安装hexo-next</h1><blockquote>
<p>1.安装hexo-next插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;#先myproject目录下执行</span><br><span class="line">&gt;git clone https://github.com/theme-next/hexo-theme-next.git</span><br><span class="line">&gt;#修改myproject目录下的_conf.yml</span><br><span class="line">&gt;theme: next</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/pictures/update_hexo_config.png" alt="alt 修改config"></p>
<h1 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h1><p>1.myproject&#x2F;_config.yml</p>
<blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 中文</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="comment">## 时间统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 文章阅读时间统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 网站总字数统计</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 网站总阅读时间统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#搜索 防止部署之后一致加载搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>2.myproject&#x2F;themes&#x2F;next&#x2F;_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 时间统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="comment">## 是否另起一行</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">## 首页统计数量前是否显示文字</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">## 底部统计数量前是否显示文字</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">## 平均字长</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="comment">## 每分钟阅读字数</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">300</span></span><br><span class="line">  <span class="comment"># 站点预览</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.目录为source为根目录</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>


</blockquote>
<h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><blockquote>
<p>1.新建文章(文章名称:doc)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new doc</span><br></pre></td></tr></table></figure>

<p>2.使用markdown编辑器修改文章</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#文章目录</span><br><span class="line">/myproject/_posts/doc</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h1><blockquote>
<p>1.修改myproject目录下的_conf.yml配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修改deploy属性</span><br></pre></td></tr></table></figure>

<p><img src="/pictures/update_display_config.jpg" alt="alt 修改config"></p>
<p>2.发布命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>

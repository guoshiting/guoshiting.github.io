<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>BIO,NIO&amp;AIO认识以及Netty初识</title>
    <url>/2022/09/20/BIO-NIO-AIO%E8%AE%A4%E8%AF%86/</url>
    <content><![CDATA[<h1 id="BIO-NIO-amp-AIO认识及Netty初识"><a href="#BIO-NIO-amp-AIO认识及Netty初识" class="headerlink" title="BIO,NIO&amp;AIO认识及Netty初识"></a>BIO,NIO&amp;AIO认识及Netty初识</h1><span id="more"></span>

<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>1.BIO(Blocking IO)</strong></p>
<ul>
<li>同步阻塞模型，一个线程对应一个连接，连接时(accept)阻塞等待客户端连接，读取信息(read)时阻塞，等待客户端发送消息。</li>
</ul>
<p><strong>2.NIO(Non Blocking IO)</strong></p>
<ul>
<li>同步非阻塞模型，利用多路复用机制，实现一个线程处理多个连接；客户端的连接请求会注册到多路复用器(selector)上，多路复用器<strong>同步等待</strong>轮询或回调到有请求时就用进行处理。</li>
<li><strong>应用</strong>：常用于并发高，连接短，操作轻的情况，例如：聊天室</li>
</ul>
<p><strong>3.AIO(NIO 2.0)</strong></p>
<ul>
<li>异步非阻塞模型，由操作系统(底层OS)回调通知服务器<strong>异步</strong>处理IO事件</li>
<li><strong>应用</strong>：连接时间长，操作重的场景。</li>
</ul>
<h3 id="NIO详解"><a href="#NIO详解" class="headerlink" title="NIO详解"></a>NIO详解</h3><p><strong>1.NIO的三大组件channel，buffer和selecter</strong></p>
<ul>
<li>channel为客户端和服务器的连接通道</li>
<li>buffer数据结构为数组，buffer读取或写入channel的内容</li>
<li>selecter多路复用器，channel注册到selecter，selecter分配空闲线程处理channel的IO事件</li>
</ul>
<p><strong>2.NioSelectorServe初识</strong></p>
<ul>
<li>Selector.open() &#x2F;&#x2F;创建多路复用器，生成一个Selector对象</li>
<li>socketChannel.register(Selector，type) &#x2F;&#x2F;将channel注册到多路复用器上，并规定时间类型</li>
<li>selector.select() &#x2F;&#x2F;阻塞等待注册的channel发生IO事件</li>
<li>selector.selectedKeys() &#x2F;&#x2F;返回所有有IO事件的集合(SelectionKey),通过集合中的元素可以找到channel</li>
</ul>
<p><strong>3.epoll初识</strong></p>
<ul>
<li>JDK1.4以前用select(连接数为1024)或poll(连接数无上限)来实现NIO，JDK1.5开始使用epoll实现NIO。</li>
<li>select()或poll()通过不断轮询事件，来确定是否发生了IO事件。</li>
<li>epoll：OS感应到网络IO事件时，通过回调方法把事件放到一个文件中(可以理解为集合)，调用 selectedKeys时获取封装的事件。</li>
</ul>
<p><strong>3.为什么NIO使用较广</strong></p>
<ul>
<li>linux中，AIO的底层实现仍使用Epoll，性能上没有太大的优势</li>
<li>linux中，AIO的实现还不够成熟</li>
<li>Netty框架使用较多，Netty在NIO上做了很多异步的封装</li>
</ul>
<h3 id="Netty初识"><a href="#Netty初识" class="headerlink" title="Netty初识"></a>Netty初识</h3><p><strong>1.Netty概述</strong></p>
<ul>
<li>netty是一种异步的，事件驱动的网络通信框架。性能比较好，应用较广，Dubbo 协议默认使用 Netty 作为基础通信组件以及游戏行业使用较广。</li>
</ul>
<p><strong>2.线程模型</strong></p>
<ul>
<li><img src="/pictures/netty-01.png" alt="alt netty线程模型"></li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-next新增文章</title>
    <url>/2022/09/19/hexo-next%E6%96%B0%E5%A2%9E%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="hexo-next新增文章"><a href="#hexo-next新增文章" class="headerlink" title="hexo-next新增文章"></a>hexo-next新增文章</h1><span id="more"></span>

<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><blockquote>
<p>1.安装node.js和git</p>
<p>2.安装hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#安装hexo</span><br><span class="line">npm install -g hexo</span><br><span class="line">#新建自己的项目文件夹(myproject)并进入自己的项目文件夹</span><br><span class="line">cd myproject</span><br><span class="line">hexo init</span><br><span class="line">#安装依赖</span><br><span class="line">npm install</span><br><span class="line">#hexo编译和启动</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">#访问http://localhost:4000,查看hexo是否搭建成功</span><br></pre></td></tr></table></figure>

<p>3.安装git插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="安装hexo-next"><a href="#安装hexo-next" class="headerlink" title="安装hexo-next"></a>安装hexo-next</h1><blockquote>
<p>1.安装hexo-next插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;#先myproject目录下执行</span><br><span class="line">&gt;git clone https://github.com/theme-next/hexo-theme-next.git</span><br><span class="line">&gt;#修改myproject目录下的_conf.yml</span><br><span class="line">&gt;theme: next</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img src="/pictures/update_hexo_config.png" alt="alt 修改config"></p>
<h1 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h1><p>1.myproject&#x2F;_config.yml</p>
<blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 中文</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="comment">## 时间统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 文章阅读时间统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 网站总字数统计</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 网站总阅读时间统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#搜索 防止部署之后一致加载搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>2.myproject&#x2F;themes&#x2F;next&#x2F;_config.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 时间统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="comment">## 是否另起一行</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">## 首页统计数量前是否显示文字</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">## 底部统计数量前是否显示文字</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">## 平均字长</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="comment">## 每分钟阅读字数</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">300</span></span><br><span class="line">  <span class="comment"># 站点预览</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.目录为source为根目录</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>


</blockquote>
<h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><blockquote>
<p>1.新建文章(文章名称:doc)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new doc</span><br></pre></td></tr></table></figure>

<p>2.使用markdown编辑器修改文章</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#文章目录</span><br><span class="line">/myproject/_posts/doc</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h1><blockquote>
<p>1.修改myproject目录下的_conf.yml配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#修改deploy属性</span><br></pre></td></tr></table></figure>

<p><img src="/pictures/update_display_config.jpg" alt="alt 修改config"></p>
<p>2.发布命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></blockquote>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA程序打war包-idea</title>
    <url>/2022/09/19/JAVA%E7%A8%8B%E5%BA%8F%E6%89%93war%E5%8C%85-idea/</url>
    <content><![CDATA[<h1 id="JAVA程序打war包-idea"><a href="#JAVA程序打war包-idea" class="headerlink" title="JAVA程序打war包(idea)"></a>JAVA程序打war包(idea)</h1><span id="more"></span>

<ul>
<li><h2 id="war包设置"><a href="#war包设置" class="headerlink" title="war包设置"></a>war包设置</h2><blockquote>
<p>1.File -&gt; Project Structure</p>
</blockquote>
</li>
</ul>
<p><img src="/pictures/2-1.png" alt="alt 2-1"></p>
<p><img src="/pictures/2-2.png" alt="alt 2-2"></p>
<ul>
<li><h2 id="war包编译设置"><a href="#war包编译设置" class="headerlink" title="war包编译设置"></a>war包编译设置</h2></li>
</ul>
<blockquote>
<p>1.设置工程打包路径</p>
</blockquote>
<p><img src="/pictures/2-3.png" alt="alt 2-3"></p>
<blockquote>
<p>2.加入class和lib</p>
</blockquote>
<p><img src="/pictures/2-4.png" alt="alt 2-4"></p>
<p><img src="/pictures/2-5.png" alt="alt 2-5"></p>
<ul>
<li><h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2></li>
</ul>
<blockquote>
<p>Build -&gt; Build Artifacts -&gt; Build</p>
</blockquote>
<p><img src="/pictures/2-6.png" alt="alt 2-6"></p>
<p><img src="/pictures/2-7.png" alt="alt 2-7"></p>
<ul>
<li><h2 id="注意设置java编译路径"><a href="#注意设置java编译路径" class="headerlink" title="注意设置java编译路径"></a>注意设置java编译路径</h2></li>
</ul>
<blockquote>
<p>1.File -&gt; Project Structure -&gt; Project</p>
</blockquote>
<p><img src="/pictures/2-8.jpg" alt="alt 2-8"></p>
]]></content>
      <categories>
        <category>idea使用</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>自动注入@Autowired和@Resource</title>
    <url>/2022/09/19/%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5-Autowired%E5%92%8C-Resource/</url>
    <content><![CDATA[<h1 id="自动注入-Autowired和-Resource"><a href="#自动注入-Autowired和-Resource" class="headerlink" title="自动注入@Autowired和@Resource"></a>自动注入@Autowired和@Resource</h1><span id="more"></span>

<h4 id="1-来源不同"><a href="#1-来源不同" class="headerlink" title="1.来源不同"></a>1.来源不同</h4><blockquote>
<ul>
<li>@Autowired来自Spring，全路径类名为：org.springframework.beans.factory.annotation.Autowired</li>
<li>@Resource 来自JDK，全路径类名为：javax.annotation.Resource</li>
</ul>
</blockquote>
<h4 id="2-注入方式不同"><a href="#2-注入方式不同" class="headerlink" title="2.注入方式不同"></a>2.注入方式不同</h4><blockquote>
<p><del>大家的常识似乎为@Autowired是根据类型注入的，如果两个类实现同一个接口就不能用@Autowired</del>，<strong>但这个常识是错误的</strong></p>
<p>@Autowired的注入方式为：</p>
<ul>
<li>如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据</li>
<li>如果查询的结果不止一个，先根据 @Primary 来决策，其次是 @Priority 决策优先级</li>
<li>最后是根据 Bean 名字的严格匹配来决策</li>
</ul>
<p><img src="/pictures/autowire.png" alt="alt 修改config"></p>
<p>@Resource的注入方式为：</p>
<ul>
<li>如果没有指定name和type属性的话，默认首先使用属性名称作为bean name进行注入，如果查询不到，则使用属性的类型进行查找注入</li>
<li>如果指定了name和type其中一个，就按照指定的来进行注入，找不到或者找到多个，都会抛出异常</li>
<li>如果同时指定了name和type，则从Spring上下文中找到唯一匹配（类型和名称同时匹配）的bean进行装配，找不到则抛出异常</li>
</ul>
</blockquote>
<h4 id="其他方面"><a href="#其他方面" class="headerlink" title="其他方面"></a>其他方面</h4><blockquote>
<ul>
<li><p>如果@Autowired想指定名称注入的话，一般用@Autowired+@Qualifie(“beanName”)的方式</p>
</li>
<li><p>@Autowired与@Resource都可以用来装配bean. 都可以写在字段上,或写在setter方法上。</p>
</li>
<li><p>@Autowired默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false（@Autowired(required&#x3D;false)</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>spring初识</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
</search>
